# Code generated by jtd-codegen for Python v0.3.1

import re
from dataclasses import dataclass
from datetime import datetime, timedelta, timezone
from typing import Any, Dict, Optional, Union, get_args, get_origin


@dataclass
class Course:
    a_emplid: 'str'
    a_strm: 'str'
    b_catalog_nbr: 'str'
    b_crse_id: 'str'
    b_descr: 'str'
    b_subject: 'str'
    c_sort_order: 'str'
    c_weekday_name: 'str'
    d_xlatlongname: 'str'
    date: 'str'
    e_descr: 'str'
    e_room: 'str'
    end_time: 'str'
    f_descr: 'str'
    start_time: 'str'
    attr_rownumber: 'str'

    @classmethod
    def from_json_data(cls, data: Any) -> 'Course':
        return cls(
            _from_json_data(str, data.get("A.EMPLID")),
            _from_json_data(str, data.get("A.STRM")),
            _from_json_data(str, data.get("B.CATALOG_NBR")),
            _from_json_data(str, data.get("B.CRSE_ID")),
            _from_json_data(str, data.get("B.DESCR")),
            _from_json_data(str, data.get("B.SUBJECT")),
            _from_json_data(str, data.get("C.SORT_ORDER")),
            _from_json_data(str, data.get("C.WEEKDAY_NAME")),
            _from_json_data(str, data.get("D.XLATLONGNAME")),
            _from_json_data(str, data.get("DATE")),
            _from_json_data(str, data.get("E.DESCR")),
            _from_json_data(str, data.get("E.ROOM")),
            _from_json_data(str, data.get("END_TIME")),
            _from_json_data(str, data.get("F.DESCR")),
            _from_json_data(str, data.get("START_TIME")),
            _from_json_data(str, data.get("attr:rownumber")),
        )

    def to_json_data(self) -> Any:
        data: Dict[str, Any] = {}
        data["A.EMPLID"] = _to_json_data(self.a_emplid)
        data["A.STRM"] = _to_json_data(self.a_strm)
        data["B.CATALOG_NBR"] = _to_json_data(self.b_catalog_nbr)
        data["B.CRSE_ID"] = _to_json_data(self.b_crse_id)
        data["B.DESCR"] = _to_json_data(self.b_descr)
        data["B.SUBJECT"] = _to_json_data(self.b_subject)
        data["C.SORT_ORDER"] = _to_json_data(self.c_sort_order)
        data["C.WEEKDAY_NAME"] = _to_json_data(self.c_weekday_name)
        data["D.XLATLONGNAME"] = _to_json_data(self.d_xlatlongname)
        data["DATE"] = _to_json_data(self.date)
        data["E.DESCR"] = _to_json_data(self.e_descr)
        data["E.ROOM"] = _to_json_data(self.e_room)
        data["END_TIME"] = _to_json_data(self.end_time)
        data["F.DESCR"] = _to_json_data(self.f_descr)
        data["START_TIME"] = _to_json_data(self.start_time)
        data["attr:rownumber"] = _to_json_data(self.attr_rownumber)
        return data

def _from_json_data(cls: Any, data: Any) -> Any:
    if data is None or cls in [bool, int, float, str, object] or cls is Any:
        return data
    if cls is datetime:
        return _parse_rfc3339(data)
    if get_origin(cls) is Union:
        return _from_json_data(get_args(cls)[0], data)
    if get_origin(cls) is list:
        return [_from_json_data(get_args(cls)[0], d) for d in data]
    if get_origin(cls) is dict:
        return { k: _from_json_data(get_args(cls)[1], v) for k, v in data.items() }
    return cls.from_json_data(data)

def _to_json_data(data: Any) -> Any:
    if data is None or type(data) in [bool, int, float, str, object]:
        return data
    if type(data) is datetime:
        return data.isoformat()
    if type(data) is list:
        return [_to_json_data(d) for d in data]
    if type(data) is dict:
        return { k: _to_json_data(v) for k, v in data.items() }
    return data.to_json_data()

def _parse_rfc3339(s: str) -> datetime:
    datetime_re = '^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(\.\d+)?([zZ]|((\+|-)(\d{2}):(\d{2})))$'
    match = re.match(datetime_re, s)
    if not match:
        raise ValueError('Invalid RFC3339 date/time', s)

    (year, month, day, hour, minute, second, frac_seconds, offset,
     *tz) = match.groups()

    frac_seconds_parsed = None
    if frac_seconds:
        frac_seconds_parsed = int(float(frac_seconds) * 1_000_000)
    else:
        frac_seconds_parsed = 0

    tzinfo = None
    if offset == 'Z':
        tzinfo = timezone.utc
    else:
        hours = int(tz[2])
        minutes = int(tz[3])
        sign = 1 if tz[1] == '+' else -1

        if minutes not in range(60):
            raise ValueError('minute offset must be in 0..59')

        tzinfo = timezone(timedelta(minutes=sign * (60 * hours + minutes)))

    second_parsed = int(second)
    if second_parsed == 60:
        second_parsed = 59

    return datetime(int(year), int(month), int(day), int(hour), int(minute),
                    second_parsed, frac_seconds_parsed, tzinfo)            
